// scss-docs-start spacer-variables-maps
@function negativify-map($map) {
  $result: ();

  @each $key, $value in $map {
    @if $key !=0 {
      $result: map-merge($result, ("n" + $key: (-$value)));
    }
  }

  @return $result;
}

$enable-important-utilities: true !default;
$font-size-base: 1rem; // Assumes the browser default, typically `16px`
$font-size-sm: $font-size-base * 0.875;
$font-size-lg: $font-size-base * 1.25;
$font-weight-lighter: lighter;
$font-weight-light: 300;
$font-weight-normal: 400;
$font-weight-bold: 700;
$font-weight-bolder: bolder;
$border-radius: 0.25rem;
$border-radius-sm: 0.2rem;
$border-radius-lg: 0.3rem;
$border-radius-pill: 50rem;
$h1-font-size: $font-size-base * 2.5;
$h2-font-size: $font-size-base * 2;
$h3-font-size: $font-size-base * 1.75;
$h4-font-size: $font-size-base * 1.5;
$h5-font-size: $font-size-base * 1.25;
$h6-font-size: $font-size-base;
$font-sizes: (
  1: $h1-font-size,
  2: $h2-font-size,
  3: $h3-font-size,
  4: $h4-font-size,
  5: $h5-font-size,
  6: $h6-font-size,
);
$spacer: 1rem !default;
$spacers: (
  0: 0,
  1: $spacer * 0.25,
  2: $spacer * 0.5,
  3: $spacer,
  4: $spacer * 1.5,
  5: $spacer * 3,
) !default;
$negative-spacers: negativify-map($spacers) !default;
// Utilities
$utilities: () !default;
// stylelint-disable-next-line scss/dollar-variable-default
$utilities: map-merge(
  (
    // Margin utilities
    // scss-docs-start utils-spacing
    "margin":
      (
        responsive: true,
        property: margin,
        class: m,
        values:
          map-merge(
            $spacers,
            (
              auto: auto,
            )
          ),
      ),
    "margin-x": (
      responsive: true,
      property: margin-right margin-left,
      class: mx,
      values:
        map-merge(
          $spacers,
          (
            auto: auto,
          )
        ),
    ),
    "margin-y": (
      responsive: true,
      property: margin-top margin-bottom,
      class: my,
      values:
        map-merge(
          $spacers,
          (
            auto: auto,
          )
        ),
    ),
    "margin-top": (
      responsive: true,
      property: margin-top,
      class: mt,
      values:
        map-merge(
          $spacers,
          (
            auto: auto,
          )
        ),
    ),
    "margin-end": (
      responsive: true,
      property: margin-right,
      class: me,
      values:
        map-merge(
          $spacers,
          (
            auto: auto,
          )
        ),
    ),
    "margin-bottom": (
      responsive: true,
      property: margin-bottom,
      class: mb,
      values:
        map-merge(
          $spacers,
          (
            auto: auto,
          )
        ),
    ),
    "margin-start": (
      responsive: true,
      property: margin-left,
      class: ms,
      values:
        map-merge(
          $spacers,
          (
            auto: auto,
          )
        ),
    ),
    // Negative margin utilities
    "negative-margin":
      (
        responsive: true,
        property: margin,
        class: m,
        values: $negative-spacers,
      ),
    "negative-margin-x": (
      responsive: true,
      property: margin-right margin-left,
      class: mx,
      values: $negative-spacers,
    ),
    "negative-margin-y": (
      responsive: true,
      property: margin-top margin-bottom,
      class: my,
      values: $negative-spacers,
    ),
    "negative-margin-top": (
      responsive: true,
      property: margin-top,
      class: mt,
      values: $negative-spacers,
    ),
    "negative-margin-end": (
      responsive: true,
      property: margin-right,
      class: me,
      values: $negative-spacers,
    ),
    "negative-margin-bottom": (
      responsive: true,
      property: margin-bottom,
      class: mb,
      values: $negative-spacers,
    ),
    "negative-margin-start": (
      responsive: true,
      property: margin-left,
      class: ms,
      values: $negative-spacers,
    ),
    // Padding utilities
    "padding":
      (
        responsive: true,
        property: padding,
        class: p,
        values: $spacers,
      ),
    "padding-x": (
      responsive: true,
      property: padding-right padding-left,
      class: px,
      values: $spacers,
    ),
    "padding-y": (
      responsive: true,
      property: padding-top padding-bottom,
      class: py,
      values: $spacers,
    ),
    "padding-top": (
      responsive: true,
      property: padding-top,
      class: pt,
      values: $spacers,
    ),
    "padding-end": (
      responsive: true,
      property: padding-right,
      class: pe,
      values: $spacers,
    ),
    "padding-bottom": (
      responsive: true,
      property: padding-bottom,
      class: pb,
      values: $spacers,
    ),
    "padding-start": (
      responsive: true,
      property: padding-left,
      class: ps,
      values: $spacers,
    ),
    //Text Utilites
    "text-align":
      (
        responsive: true,
        property: text-align,
        class: text,
        values: (
          start: left,
          end: right,
          center: center,
        ),
      ),
    "text-decoration": (
      responsive: true,
      property: text-decoration,
      values: none underline line-through,
    ),
    "text-transform": (
      responsive: true,
      property: text-transform,
      class: text,
      values: lowercase uppercase capitalize,
    ),
    "white-space": (
      responsive: true,
      property: white-space,
      class: text,
      values: (
        wrap: normal,
        nowrap: nowrap,
      ),
    ),
    "font-weight": (
      property: font-weight,
      class: fw,
      values: (
        light: $font-weight-light,
        lighter: $font-weight-lighter,
        normal: $font-weight-normal,
        bold: $font-weight-bold,
        bolder: $font-weight-bolder,
      ),
    ),
    "font-size": (
      responsive: true,
      property: font-size,
      class: fs,
      values: $font-sizes,
    ),
    "font-style": (
      responsive: true,
      property: font-style,
      class: fst,
      values: italic normal,
    ),
    "overflow": (
      responsive: true,
      property: overflow,
      class: overflow,
      values: auto hidden visible scroll,
    ),
    "visibility": (
      responsive: true,
      property: visibility,
      class: null,
      values: (
        visible: visible,
        invisible: hidden,
      ),
    ),
    "word-wrap": (
      responsive: true,
      property: word-wrap word-break,
      class: text,
      values: (
        break-word: break-word,
        break-all: break-all,
      ),
      rtl: false,
    )
  ),
  $utilities
);

@mixin generate-utility($utility, $infix, $is-rfs-media-query: false) {
  $values: map-get($utility, values);

  // If the values are a list or string, convert it into a map
  @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
    $values: zip($values, $values);
  }

  @each $key, $value in $values {
    $properties: map-get($utility, property);

    // Multiple properties are possible, for example with vertical or horizontal margins or paddings
    @if type-of($properties) == "string" {
      $properties: append((), $properties);
    }

    // Use custom class if present
    $property-class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));
    $property-class: if($property-class ==null, "", $property-class);
    // State params to generate pseudo-classes
    $state: if(map-has-key($utility, state), map-get($utility, state), ());
    $infix: if($property-class == "" and str-slice($infix, 1, 1) == "-", str-slice($infix, 2), $infix);
    // Don't prefix if value key is null (eg. with shadow class)
    $property-class-modifier: if($key, if($property-class == "" and $infix == "", "", "-") + $key, "");

    @if map-get($utility, rfs) {
      // Inside the media query
      @if $is-rfs-media-query {
        $val: rfs-value($value);
        // Do not render anything if fluid and non fluid values are the same
        $value: if($val ==rfs-fluid-value($value), null, $val);
      } @else {
        $value: rfs-fluid-value($value);
      }
    }

    $is-css-var: map-get($utility, css-var);
    $is-local-vars: map-get($utility, local-vars);
    $is-rtl: map-get($utility, rtl);

    @if $value !=null {
      @if $is-rtl ==false {
        /* rtl:begin:remove */
      }

      @if $is-css-var {
        .#{$property-class + $infix + $property-class-modifier} {
          --#{$variable-prefix}#{$property-class}: #{$value};
        }

        @each $pseudo in $state {
          .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
            --#{$variable-prefix}#{$property-class}: #{$value};
          }
        }
      } @else {
        .#{$property-class + $infix + $property-class-modifier} {
          @each $property in $properties {
            @if $is-local-vars {
              @each $local-var, $value in $is-local-vars {
                --#{$variable-prefix}#{$local-var}: #{$value};
              }
            }

            #{$property}: $value if($enable-important-utilities, !important, null);
          }
        }

        @each $pseudo in $state {
          .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
            @each $property in $properties {
              #{$property}: $value if($enable-important-utilities, !important, null);
            }
          }
        }
      }

      @if $is-rtl ==false {
        /* rtl:end:remove */
      }
    }
  }
}

/* Border */

$utilities: map-merge(
  $utilities,
  (
    "rounded": (
      property: border-radius,
      class: rounded,
      responsive: true,
      values: (
        null: $border-radius,
        0: 0,
        1: $border-radius-sm,
        2: $border-radius,
        3: $border-radius-lg,
        circle: 50%,
        pill: $border-radius-pill,
      ),
    ),
    "rounded-top": (
      property: border-top-left-radius border-top-right-radius,
      class: rounded-top,
      responsive: true,
      values: (
        null: $border-radius,
      ),
    ),
    "rounded-end": (
      property: border-top-right-radius border-bottom-right-radius,
      class: rounded-end,
      responsive: true,
      values: (
        null: $border-radius,
      ),
    ),
    "rounded-bottom": (
      property: border-bottom-right-radius border-bottom-left-radius,
      class: rounded-bottom,
      responsive: true,
      values: (
        null: $border-radius,
      ),
    ),
    "rounded-start": (
      property: border-bottom-left-radius border-top-left-radius,
      class: rounded-start,
      responsive: true,
      values: (
        null: $border-radius,
      ),
    ),
  )
);

/* Border */

/* opacity */

$utilities: map-merge(
  $utilities,
  (
    "opacity": (
      property: opacity,
      class: opacity,
      responsive: true,
      values: (
        0: 0,
        25: 0.25,
        50: 0.5,
        75: 0.75,
        100: 1,
      ),
    ),
  )
);
/* opacity */

/* Display */
$utilities: map-merge(
  $utilities,
  (
    "display": (
      property: display,
      class: d,
      responsive: true,
      values: inline inline-block block grid table table-row table-cell flex inline-flex none,
    ),
  )
);

/* Display */

/* Shadow*/
$black: black;
$box-shadow: 0 0.5rem 1rem rgba($black, 0.15);
$box-shadow-sm: 0 0.125rem 0.25rem rgba($black, 0.075);
$box-shadow-lg: 0 1rem 3rem rgba($black, 0.175);
$box-shadow-inset: inset 0 1px 2px rgba($black, 0.075);

$utilities: map-merge(
  $utilities,
  (
    "shadow": (
      property: box-shadow,
      class: shadow,
      responsive: true,
      values: (
        null: $box-shadow,
        sm: $box-shadow-sm,
        lg: $box-shadow-lg,
        none: none,
      ),
    ),
  )
);

/* Shadow*/

/*Cursor*/
$utilities: map-merge(
  $utilities,
  (
    "cursor": (
      property: cursor,
      class: cursor,
      responsive: true,
      values: auto pointer grab,
    ),
  )
);
/*Cursor*/

/*Float*/
$utilities: map-merge(
  $utilities,
  (
    "float": (
      responsive: true,
      property: float,
      values: (
        start: left,
        end: right,
        none: none,
      ),
    ),
  )
);
/*Float*/

/*Position*/
$position-values: (
  0: 0,
  25: 25%,
  50: 50%,
  75: 75%,
  100: 100%,
);
$utilities: map-merge(
  $utilities,
  (
    "position": (
      property: position,
      responsive: true,
      class: position,
      values: static relative absolute fixed sticky,
    ),
    "top": (
      property: top,
      responsive: true,
      class: top,
      values: $position-values,
    ),
    "bottom": (
      property: bottom,
      responsive: true,
      class: bottom,
      values: $position-values,
    ),
    "start": (
      property: left,
      responsive: true,
      class: start,
      values: $position-values,
    ),
    "end": (
      property: right,
      responsive: true,
      class: end,
      values: $position-values,
    ),
    "translate-middle": (
      property: transform,
      responsive: true,
      class: translate-middle,
      values: (
        null: translate(-50%, -50%),
        x: translateX(-50%),
        y: translateY(-50%),
      ),
    ),
  )
);
/*Position*/

// generate utility
@each $key, $utility in $utilities {
  // The utility can be disabled with `false`, thus check if the utility is a map first
  // Only proceed if responsive media queries are enabled or if it's the base media query
  @if type-of($utility) == "map" and (map-get($utility, responsive)) {
    @include generate-utility($utility, "");
  }
}
